# https://taskfile.dev
# TODO: отрефакторить имена задач (сделать с категориями (:)) и уменьшить количество

version: "3"

interval: 200ms

vars:
  PKG: "github.com/gitslim/go-ragger"
  NAME: "server"
  BIN_NAME: "{{.NAME}}_bin"
  BUILD_COMMIT:
    sh: git rev-parse --short HEAD
  BUILD_DATE:
    sh: git log -1 --format=%cd --date=format:"%Y%m%d"
  BUILD_VERSION: "v1.0.0"
  LDFLAGS: "-X {{.PKG}}/internal/version.buildVersion={{.BUILD_VERSION}} -X {{.PKG}}/internal/version.buildDate={{.BUILD_DATE}} -X {{.PKG}}/internal/version.buildCommit={{.BUILD_COMMIT}}"
  DB_NAME: "ragger"
  DSN: "postgres://postgres:postgres@localhost:5432/{{.DB_NAME}}?sslmode=disable"
  COMPOSE_CMD: "docker compose -f deployments/docker/docker-compose.yml"

tasks:
  tools:
    desc: "Установить утилиты"
    cmds:
      - go install github.com/go-task/task/v3/cmd/task@v3.44.0
      - go install github.com/a-h/templ/cmd/templ@v0.3.898
      - go install github.com/air-verse/air@v1.62.0
      - go install github.com/pressly/goose/v3/cmd/goose@v3.24.3
      - go install github.com/ogen-go/ogen/cmd/ogen@v1.14.0

  tidy:
    desc: "Установить и проверить пакеты"
    cmds:
      - go mod tidy
      - go mod verify

  test:
    desc: "Запустить тесты"
    cmds:
      - go test -race -v ./...

  coverage:
    desc: "Запустить покрытие кода тестами"
    cmds:
      - go test ./... -coverprofile=cover.out
      - go tool cover -func=cover.out | grep total
      - go tool cover -html=cover.out -o cover.html

  migrate-reset:
    desc: "Сбросить миграции"
    cmds:
      - goose -dir ./internal/db/migrations postgres "{{.DSN}}" reset

  migrate-up:
    desc: "Применить миграции"
    cmds:
      - goose -dir ./internal/db/migrations postgres "{{.DSN}}" up

  migrate-down:
    desc: "Откатить последнюю миграцию"
    cmds:
      - goose -dir ./internal/db/migrations postgres "{{.DSN}}" down

  migrate-status:
    desc: "Показать статус миграций"
    cmds:
      - goose -dir ./internal/db/migrations postgres "{{.DSN}}" status

  sqlc-generate:
    desc: "Сгенерировать код с помощью sqlc"
    cmds:
      - sqlc generate -f ./internal/db/sqlc.yaml

  sqlc-validate:
    desc: "Проверить SQL-запросы на ошибки без генерации"
    cmds:
      - sqlc compile -f ./internal/db/sqlc.yaml

  db-update:
    desc: "Обновить БД и сгенерировать код sqlc"
    cmds:
      - task: migrate-up
      - task: sqlc-generate

  db-seed:
    desc: "Запустить сиды"
    cmds:
      - go run ./cmd/seeder/main.go --dsn "{{.DSN}}"

  templ-generate:
    desc: "Сгенерировать шаблоны"
    env:
      TEMPL_EXPERIMENT: rawgo
    generates:
      - "**/*_templ.go"
    sources:
      - "**/*.templ"
    cmds:
      - templ generate .

  chunkr-generate:
    desc: "Сгенерировать chunkr.ai клиент"
    cmds:
      - ogen --config internal/chunkr/ogen.yaml --target internal/chunkr/api --clean internal/chunkr/openapi-3.0.json

  docker:up:
    desc: "Down docker services"
    cmds:
      - "{{.COMPOSE_CMD}} up -d"

  docker:stop:
    desc: "Stop docker services"
    cmds:
      - "{{.COMPOSE_CMD}} stop"

  docker:down:
    desc: "Down docker services"
    cmds:
      - "{{.COMPOSE_CMD}} down"

  docker:reset:
    desc: "Recreate docker services"
    cmds:
      - task: docker:stop
      - "{{.COMPOSE_CMD}} rm -fv"
      - task: docker:down
      - task: docker:up

  docker:logs:
    desc: "Log tail docker services"
    cmds:
      - "{{.COMPOSE_CMD}} logs -f"

  reset-all:
    desc: "Полный reset с регенерацией"
    cmds:
      - task: kill
      - task: tidy
      - task: sqlc-generate
      - task: templ-generate
      - task: chunkr-generate
      - task: migrate-reset
      - task: migrate-up
      - task: db-seed

  kill:
    desc: "Убить запущенные процессы"
    cmds:
      - killall -q {{.BIN_NAME}}  || echo "Process was not running."

  build:
    desc: "Собрать проект"
    cmds:
      - go build -ldflags="{{.LDFLAGS}}" -o ./build/{{.BIN_NAME}} cmd/{{.NAME}}/main.go

  watch:
    desc: "Запустить в режиме разработки с hot-reload"
    deps:
      - kill
      - templ-generate
    cmds:
      - air -build.cmd "templ generate && go build -o ./tmp/{{.BIN_NAME}} cmd/{{.NAME}}/main.go" -build.bin "./tmp/{{.BIN_NAME}}"

  default:
    desc: "Запуск задач по умолчанию"
    deps:
      - watch
    silent: false
