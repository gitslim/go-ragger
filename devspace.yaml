version: v2beta1
name: ragger

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all    # 2. Ensure pull secrets
      create_deployments --all     # 3. Deploy Helm charts and manifests specfied as "deployments"
      start_dev app                # 4. Start dev mode "app" (see "dev" section)
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      run_dependencies --all                            # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all                         # 2. Ensure pull secrets
      build_images --all -t $(git describe --always)    # 3. Build, tag (git commit hash) and push all images (see "images")
      create_deployments --all                          # 4. Deploy Helm charts and manifests specfied as "deployments"

vars:
  # images names
  PROD_IMAGE: "slim777/ragger"
  DEV_IMAGE: "slim777/ragger-dev"
  MIGRATIONS_IMAGE: "slim777/ragger-migrations"

  # hardcoded app variables
  RAGGER_SERVER_ADDRESS: "localhost:8888"
  RAGGER_DB_NAME: "ragger"
  RAGGER_DSN: "postgres://postgres:postgres@db-postgresql:5432/ragger?sslmode=disable"

  # defaults (may be ovewritten with environment variables)
  EMBEDDING_MODEL:
    source: env
    default: "dengcao/Qwen3-Embedding-0.6B:Q8_0"
  CHAT_MODEL:
    source: env
    default: "qwen3:32b"
  MILVUS_ADDRESS:
    source: env
    default: "milvus:19530"
  MILVUS_USERNAME:
    source: env
    default: "root"
  MILVUS_PASSWORD:
    source: env
    default: "Milvus"

  # required (environment variables must be set)
  CHUNKR_URL:
    source: env
  CHUNKR_API_KEY:
    source: env
  OPENAI_BASE_URL:
    source: env
  OPENAI_API_KEY:
    source: env

# This is a list of `images` that DevSpace can build for this project
# We recommend to skip image building during development (devspace dev) as much as possible
images:
  # prod image
  ragger:
    image: ${PROD_IMAGE}
    dockerfile: Dockerfile
    buildKit: {}

  # dev image
  ragger-dev:
    image: ${DEV_IMAGE}
    dockerfile: Dockerfile.dev
    buildKit: {}

  # migrations image
  migrations:
    image: ${MIGRATIONS_IMAGE}
    dockerfile: Dockerfile.migrations
    buildKit: {}

deployments:
  db:
    helm:
      chart:
        path: ./charts/postgresql
      values:
        auth:
          username: postgres
          password: postgres
          database: "${RAGGER_DB_NAME}"
        primary:
          persistence:
            enabled: true

  milvus:
    helm:
      chart:
        path: ./charts/milvus
      values:
        cluster:
          enabled: false
        etcd:
          enabled: false
        pulsarv3:
          enabled: false
        minio:
          enabled: false
          tls:
            enabled: false
        extraConfigFiles:
          user.yaml: |+
            etcd:
              use:
                embed: true
              data:
                dir: /var/lib/milvus/etcd
            common:
              storageType: local

  app:
    # This deployment uses `helm` but you can also define `kubectl` deployments or kustomizations
    helm:
      # We are deploying this project with the Helm chart you provided
      chart:
        name: component-chart
        repo: https://charts.devspace.sh
        # path: ./charts/component-chart
      # Under `values` we can define the values for this Helm chart used during `helm install/upgrade`
      # You may also use `valuesFiles` to load values from files, e.g. valuesFiles: ["values.yaml"]
      values:
        containers:
          - image: ${PROD_IMAGE}
            env:
              - name: SERVER_ADDRESS
                value: "${RAGGER_SERVER_ADDRESS}"
              - name: DB_NAME
                value: "${RAGGER_DB_NAME}"
              - name: DSN
                value: "${RAGGER_DSN}"
              - name: EMBEDDING_MODEL
                value: "${EMBEDDING_MODEL}"
              - name: CHAT_MODEL
                value: "${CHAT_MODEL}"
              - name: MILVUS_ADDRESS
                value: "${MILVUS_ADDRESS}"
              - name: MILVUS_USERNAME
                value: "${MILVUS_USERNAME}"
              - name: MILVUS_PASSWORD
                value: "${MILVUS_PASSWORD}"
              - name: CHUNKR_URL
                value: "${CHUNKR_URL}"
              - name: CHUNKR_API_KEY
                value: "${CHUNKR_API_KEY}"
              - name: OPENAI_BASE_URL
                value: "${OPENAI_BASE_URL}"
              - name: OPENAI_API_KEY
                value: "${OPENAI_API_KEY}"
        initContainers:
          - name: run-migrations
            image: ${MIGRATIONS_IMAGE}
            env:
              - name: DSN
                value: "${RAGGER_DSN}"
        service:
          ports:
            - port: 8888

# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  app:
    # Search for the container that runs this image
    imageSelector: ${PROD_IMAGE}
    # Replace the container image with this dev-optimized image (allows to skip image building during development)
    # devImage: ghcr.io/loft-sh/devspace-containers/go:1.18-alpine
    devImage: ${DEV_IMAGE}
    env:
      - name: DEBUG
        value: "true"
    # Sync files between the local filesystem and the development container
    sync:
      - path: ./
    # Open a terminal and use the following command to start it
    terminal:
      command: ./devspace_start.sh
    # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env)
    ssh:
      enabled: true
    # Make the following commands from my local machine available inside the dev container
    proxyCommands:
      - command: devspace
      - command: kubectl
      - command: helm
      - gitCredentials: true
    # Forward the following ports to be able access your application via localhost
    ports:
      - port: "8888"
      - port: "8383"
    # Open the following URLs once they return an HTTP status code other than 502 or 503
    open:
      - url: http://localhost:8383
