package documents

import (
	"fmt"
	"github.com/gitslim/go-ragger/internal/db/sqlc"
	"github.com/gitslim/go-ragger/internal/web/tpl"
	"net/http"
	"strings"
)

type ListSignals struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

templ PageDocumentList(r *http.Request, u *sqlc.User, signals *ListSignals) {
	@tpl.Page(r, u) {
		<div class="container-fluid py-4" id="documents" data-signals={ templ.JSONString(signals) }>
			<div class="d-flex justify-content-between align-items-center mb-4">
				<h2 class="mb-0">
					<iconify-icon icon="mdi:file-document-multiple" class="me-2"></iconify-icon>
					Документы
				</h2>
				<a href="/upload" class="btn btn-primary">
					<iconify-icon icon="mdi:upload" class="me-1"></iconify-icon>
					Загрузить
				</a>
			</div>
			<div class="card shadow-sm">
				<div class="card-body p-0">
					<div class="table-responsive">
						<table class="table table-hover align-middle mb-0">
							<thead class="table-light">
								<tr>
									<th class="ps-4"><iconify-icon icon="mdi:file-document" width="18"></iconify-icon> Имя</th>
									<th><iconify-icon icon="mdi:file-code" width="18"></iconify-icon> Тип</th>
									<th><iconify-icon icon="mdi:harddisk" width="18"></iconify-icon> Размер</th>
									<th><iconify-icon icon="mdi:progress-check" width="18"></iconify-icon> Статус</th>
									<th><iconify-icon icon="mdi:identifier" width="18"></iconify-icon> Chunkr Task ID</th>
									<th class="pe-4">Действия</th>
								</tr>
							</thead>
							<tbody
								id="documents_rows"
								data-on-load="@get('/documents/load')"
								data-on-interval__duration.5s="@get('/documents/load')"
							></tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	}
}

templ DocumentRows(rows []sqlc.ListDocumentsRow) {
	<tbody id="documents_rows">
		for _, row := range rows {
			<tr>
				<td class="ps-4">
					<div class="d-flex align-items-center">
						<iconify-icon
							icon={ getFileIcon(row.MimeType) }
							class="me-2 text-muted"
							width="20"
						></iconify-icon>
						<span>{ row.FileName }</span>
					</div>
				</td>
				<td class="text-muted">{ row.MimeType }</td>
				<td class="text-muted">{ formatFileSize(row.FileSize) }</td>
				<td>
					<span class={ getStatusBadgeClass(row.Status) }>
						{ row.Status }
					</span>
				</td>
				<td class="text-muted font-monospace">{ row.ChunkrTaskID.String }</td>
				<td class="pe-4">
					<div class="d-flex gap-2">
						<a href={ fmt.Sprintf("/documents/%s", row.ID) } class="btn btn-sm btn-outline-secondary" title="Просмотреть">
							<iconify-icon icon="mdi:eye" width="16"></iconify-icon>
						</a>
						<button disabled disabledclass="btn btn-sm btn-outline-danger" title="Удалить">
							<iconify-icon icon="mdi:trash-can" width="16"></iconify-icon>
						</button>
					</div>
				</td>
			</tr>
		}
	</tbody>
}

templ PageDocumentView(r *http.Request, u *sqlc.User, doc sqlc.Document) {
	@tpl.Page(r, u) {
		<div class="container py-4">
			<div class="d-flex justify-content-between align-items-center mb-4">
				<h2>
					<iconify-icon icon="mdi:file-document" class="me-2"></iconify-icon>
					{ doc.FileName }
				</h2>
				<a href="/documents" class="btn btn-outline-secondary">
					<iconify-icon icon="mdi:arrow-left" class="me-1"></iconify-icon>
					Назад к списку
				</a>
			</div>
			<div class="card shadow-sm">
				<div class="card-header bg-light">
					<h5 class="mb-0">Информация о документе</h5>
				</div>
				<div class="card-body">
					<div class="row mb-3">
						<div class="col-md-6">
							<p><strong>Тип:</strong> { doc.MimeType }</p>
							<p><strong>Размер:</strong> { formatFileSize(doc.FileSize) }</p>
						</div>
						<div class="col-md-6">
							<p>
								<strong>Статус:</strong>
								<span class={ getStatusBadgeClass(doc.Status) }>
									{ doc.Status }
								</span>
							</p>
							<p><strong>Дата загрузки:</strong> { formatTimestamp(doc.CreatedAt) } </p>
						</div>
					</div>
					<div class="d-flex gap-2">
						<a
							href={ "/documents/download/" + doc.ID.String() }
							class="btn btn-primary"
						>
							<iconify-icon icon="mdi:download" class="me-1"></iconify-icon>
							Скачать
						</a>
						<button disabled class="btn btn-outline-danger">
							<iconify-icon icon="mdi:trash-can" class="me-1"></iconify-icon>
							Удалить
						</button>
					</div>
				</div>
			</div>
			if isPreviewable(doc.MimeType) {
				<div class="card shadow-sm mt-3">
					<div class="card-header bg-light">
						<h5 class="mb-0">Просмотр документа</h5>
					</div>
					<div class="card-body">
						@renderDocumentPreview(doc)
					</div>
				</div>
			}
		</div>
	}
}

func getFileIcon(mimeType string) string {
	switch {
	case strings.HasPrefix(mimeType, "image/"):
		return "mdi:file-image"
	case strings.HasPrefix(mimeType, "application/pdf"):
		return "mdi:file-pdf"
	case strings.HasPrefix(mimeType, "text/"):
		return "mdi:file-document"
	case strings.HasPrefix(mimeType, "application/vnd.openxmlformats-officedocument"):
		return "mdi:file-word"
	default:
		return "mdi:file"
	}
}

func getStatusBadgeClass(status sqlc.DocumentStatus) string {
	switch status {
	case sqlc.DocumentStatusIndexed:
		return "badge bg-success bg-opacity-10 text-success"
	case sqlc.DocumentStatusIndexfail:
		return "badge bg-warning bg-opacity-10 text-warning"
	case sqlc.DocumentStatusChunkfail:
		return "badge bg-danger bg-opacity-10 text-danger"
	default:
		return "badge bg-secondary bg-opacity-10 text-secondary"
	}
}

func formatFileSize(bytes int64) string {
	const unit = 1024
	if bytes < unit {
		return fmt.Sprintf("%d B", bytes)
	}
	div, exp := int64(unit), 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(bytes)/float64(div), "KMGTPE"[exp])
}
