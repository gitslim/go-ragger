// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createDocument = `-- name: CreateDocument :one
INSERT INTO documents (
    user_id, file_name, mime_type, file_data, file_size, file_hash
) VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (user_id, file_hash) DO NOTHING
RETURNING id, user_id, file_name, mime_type, file_data, file_size, file_hash, status, chunkr_task_id, chunkr_result, created_at, updated_at
`

type CreateDocumentParams struct {
	UserID   uuid.UUID `json:"user_id"`
	FileName string    `json:"file_name"`
	MimeType string    `json:"mime_type"`
	FileData []byte    `json:"file_data"`
	FileSize int64     `json:"file_size"`
	FileHash []byte    `json:"file_hash"`
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (Document, error) {
	row := q.db.QueryRow(ctx, createDocument,
		arg.UserID,
		arg.FileName,
		arg.MimeType,
		arg.FileData,
		arg.FileSize,
		arg.FileHash,
	)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileName,
		&i.MimeType,
		&i.FileData,
		&i.FileSize,
		&i.FileHash,
		&i.Status,
		&i.ChunkrTaskID,
		&i.ChunkrResult,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash)
VALUES ($1, $2)
RETURNING id, email, password_hash, created_at
`

type CreateUserParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const createUserIfNotExists = `-- name: CreateUserIfNotExists :one
INSERT INTO users (email, password_hash)
VALUES ($1, $2)
ON CONFLICT (email) DO NOTHING
RETURNING id, email, password_hash, created_at
`

type CreateUserIfNotExistsParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) CreateUserIfNotExists(ctx context.Context, arg CreateUserIfNotExistsParams) (User, error) {
	row := q.db.QueryRow(ctx, createUserIfNotExists, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getChunkedDocuments = `-- name: GetChunkedDocuments :many
SELECT id, user_id, file_name, mime_type, file_data, file_size, file_hash, status, chunkr_task_id, chunkr_result, created_at, updated_at
FROM documents
WHERE status = 'chunked'
ORDER BY created_at ASC
LIMIT $1
`

func (q *Queries) GetChunkedDocuments(ctx context.Context, limit int32) ([]Document, error) {
	rows, err := q.db.Query(ctx, getChunkedDocuments, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FileName,
			&i.MimeType,
			&i.FileData,
			&i.FileSize,
			&i.FileHash,
			&i.Status,
			&i.ChunkrTaskID,
			&i.ChunkrResult,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChunkingDocuments = `-- name: GetChunkingDocuments :many
SELECT id, user_id, file_name, mime_type, file_data, file_size, file_hash, status, chunkr_task_id, chunkr_result, created_at, updated_at
FROM documents
WHERE status = 'chunking'
ORDER BY created_at ASC
LIMIT $1
`

func (q *Queries) GetChunkingDocuments(ctx context.Context, limit int32) ([]Document, error) {
	rows, err := q.db.Query(ctx, getChunkingDocuments, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FileName,
			&i.MimeType,
			&i.FileData,
			&i.FileSize,
			&i.FileHash,
			&i.Status,
			&i.ChunkrTaskID,
			&i.ChunkrResult,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentsByStatus = `-- name: GetDocumentsByStatus :many
SELECT id, user_id, file_name, mime_type, file_data, file_size, file_hash, status, chunkr_task_id, chunkr_result, created_at, updated_at
FROM documents
WHERE status = $1
ORDER BY created_at ASC
LIMIT $2
`

type GetDocumentsByStatusParams struct {
	Status DocumentStatus `json:"status"`
	Limit  int32          `json:"limit"`
}

func (q *Queries) GetDocumentsByStatus(ctx context.Context, arg GetDocumentsByStatusParams) ([]Document, error) {
	rows, err := q.db.Query(ctx, getDocumentsByStatus, arg.Status, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FileName,
			&i.MimeType,
			&i.FileData,
			&i.FileSize,
			&i.FileHash,
			&i.Status,
			&i.ChunkrTaskID,
			&i.ChunkrResult,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentsStatusCounts = `-- name: GetDocumentsStatusCounts :one
SELECT 
    COUNT(*) FILTER (WHERE status = 'indexed') AS ready_count,
    COUNT(*) FILTER (WHERE status IN (
        'pending',
        'chunking',
        'checking',
        'chunked',
        'indexing'
    )) AS processing_count,
    COUNT(*) FILTER (WHERE status IN (
        'chunkfail',
        'indexfail'
    )) AS failed_count,
    COUNT(*) AS total_count
FROM documents
WHERE user_id = $1
`

type GetDocumentsStatusCountsRow struct {
	ReadyCount      int64 `json:"ready_count"`
	ProcessingCount int64 `json:"processing_count"`
	FailedCount     int64 `json:"failed_count"`
	TotalCount      int64 `json:"total_count"`
}

func (q *Queries) GetDocumentsStatusCounts(ctx context.Context, userID uuid.UUID) (GetDocumentsStatusCountsRow, error) {
	row := q.db.QueryRow(ctx, getDocumentsStatusCounts, userID)
	var i GetDocumentsStatusCountsRow
	err := row.Scan(
		&i.ReadyCount,
		&i.ProcessingCount,
		&i.FailedCount,
		&i.TotalCount,
	)
	return i, err
}

const getPendingDocuments = `-- name: GetPendingDocuments :many
SELECT id, user_id, file_name, mime_type, file_data, file_size, file_hash, status, chunkr_task_id, chunkr_result, created_at, updated_at
FROM documents
WHERE status = 'pending'
ORDER BY created_at ASC
LIMIT $1
`

func (q *Queries) GetPendingDocuments(ctx context.Context, limit int32) ([]Document, error) {
	rows, err := q.db.Query(ctx, getPendingDocuments, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FileName,
			&i.MimeType,
			&i.FileData,
			&i.FileSize,
			&i.FileHash,
			&i.Status,
			&i.ChunkrTaskID,
			&i.ChunkrResult,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, created_at FROM users 
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, password_hash, created_at FROM users 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getUserDocumentById = `-- name: GetUserDocumentById :one
SELECT id, user_id, file_name, mime_type, file_data, file_size, file_hash, status, chunkr_task_id, chunkr_result, created_at, updated_at
FROM documents
WHERE id = $1 AND user_id = $2
`

type GetUserDocumentByIdParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetUserDocumentById(ctx context.Context, arg GetUserDocumentByIdParams) (Document, error) {
	row := q.db.QueryRow(ctx, getUserDocumentById, arg.ID, arg.UserID)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileName,
		&i.MimeType,
		&i.FileData,
		&i.FileSize,
		&i.FileHash,
		&i.Status,
		&i.ChunkrTaskID,
		&i.ChunkrResult,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDocuments = `-- name: ListDocuments :many
SELECT 
    id,
    file_name,
    mime_type,
    file_size,
    status,
    chunkr_task_id,
    created_at
FROM documents
WHERE 
    user_id = $1 AND
    file_name LIKE '%' || $2 || '%' AND
    mime_type LIKE CASE 
        WHEN $3 = '' THEN '%'
        ELSE $3 
    END AND
    status = CASE
        WHEN $4::text = '' THEN status
        ELSE $4::document_status
    END
ORDER BY created_at DESC
LIMIT $6 OFFSET $5
`

type ListDocumentsParams struct {
	UserID       uuid.UUID   `json:"user_id"`
	SearchQuery  pgtype.Text `json:"search_query"`
	MimeFilter   interface{} `json:"mime_filter"`
	StatusFilter string      `json:"status_filter"`
	ResultOffset int32       `json:"result_offset"`
	ResultLimit  int32       `json:"result_limit"`
}

type ListDocumentsRow struct {
	ID           uuid.UUID          `json:"id"`
	FileName     string             `json:"file_name"`
	MimeType     string             `json:"mime_type"`
	FileSize     int64              `json:"file_size"`
	Status       DocumentStatus     `json:"status"`
	ChunkrTaskID pgtype.Text        `json:"chunkr_task_id"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

// @param user_id - UUID пользователя
// @param search_query - поиск по file_name
// @param mime_filter - фильтр по MIME-типу
// @param status_filter - фильтр по статусу
// @param result_limit - лимит
// @param result_offset - смещение
func (q *Queries) ListDocuments(ctx context.Context, arg ListDocumentsParams) ([]ListDocumentsRow, error) {
	rows, err := q.db.Query(ctx, listDocuments,
		arg.UserID,
		arg.SearchQuery,
		arg.MimeFilter,
		arg.StatusFilter,
		arg.ResultOffset,
		arg.ResultLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDocumentsRow
	for rows.Next() {
		var i ListDocumentsRow
		if err := rows.Scan(
			&i.ID,
			&i.FileName,
			&i.MimeType,
			&i.FileSize,
			&i.Status,
			&i.ChunkrTaskID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const lockDocumentForChecking = `-- name: LockDocumentForChecking :one
UPDATE documents
SET 
    status = 'checking',
    updated_at = NOW()
WHERE id = $1 AND status = 'chunking'
RETURNING id, user_id, file_name, mime_type, file_data, file_size, file_hash, status, chunkr_task_id, chunkr_result, created_at, updated_at
`

func (q *Queries) LockDocumentForChecking(ctx context.Context, id uuid.UUID) (Document, error) {
	row := q.db.QueryRow(ctx, lockDocumentForChecking, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileName,
		&i.MimeType,
		&i.FileData,
		&i.FileSize,
		&i.FileHash,
		&i.Status,
		&i.ChunkrTaskID,
		&i.ChunkrResult,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const lockDocumentForChunking = `-- name: LockDocumentForChunking :one
UPDATE documents
SET 
    status = 'chunking',
    updated_at = NOW()
WHERE id = $1 AND status = 'pending'
RETURNING id, user_id, file_name, mime_type, file_data, file_size, file_hash, status, chunkr_task_id, chunkr_result, created_at, updated_at
`

func (q *Queries) LockDocumentForChunking(ctx context.Context, id uuid.UUID) (Document, error) {
	row := q.db.QueryRow(ctx, lockDocumentForChunking, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileName,
		&i.MimeType,
		&i.FileData,
		&i.FileSize,
		&i.FileHash,
		&i.Status,
		&i.ChunkrTaskID,
		&i.ChunkrResult,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const lockDocumentForIndexing = `-- name: LockDocumentForIndexing :one
UPDATE documents
SET 
    status = 'indexing',
    updated_at = NOW()
WHERE id = $1 AND status = 'chunked'
RETURNING id, user_id, file_name, mime_type, file_data, file_size, file_hash, status, chunkr_task_id, chunkr_result, created_at, updated_at
`

func (q *Queries) LockDocumentForIndexing(ctx context.Context, id uuid.UUID) (Document, error) {
	row := q.db.QueryRow(ctx, lockDocumentForIndexing, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileName,
		&i.MimeType,
		&i.FileData,
		&i.FileSize,
		&i.FileHash,
		&i.Status,
		&i.ChunkrTaskID,
		&i.ChunkrResult,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const resetStuckChunkingDocuments = `-- name: ResetStuckChunkingDocuments :exec
UPDATE documents
SET status = 'pending'
WHERE status = 'chunking' 
AND updated_at < NOW() - INTERVAL '60 minutes'
`

func (q *Queries) ResetStuckChunkingDocuments(ctx context.Context) error {
	_, err := q.db.Exec(ctx, resetStuckChunkingDocuments)
	return err
}

const setChunkingResult = `-- name: SetChunkingResult :one
UPDATE documents
SET 
    chunkr_result = $2,
    status = 'chunked',
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, file_name, mime_type, file_data, file_size, file_hash, status, chunkr_task_id, chunkr_result, created_at, updated_at
`

type SetChunkingResultParams struct {
	ID           uuid.UUID `json:"id"`
	ChunkrResult []byte    `json:"chunkr_result"`
}

func (q *Queries) SetChunkingResult(ctx context.Context, arg SetChunkingResultParams) (Document, error) {
	row := q.db.QueryRow(ctx, setChunkingResult, arg.ID, arg.ChunkrResult)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileName,
		&i.MimeType,
		&i.FileData,
		&i.FileSize,
		&i.FileHash,
		&i.Status,
		&i.ChunkrTaskID,
		&i.ChunkrResult,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setChunkrTaskID = `-- name: SetChunkrTaskID :one
UPDATE documents
SET 
    chunkr_task_id = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, file_name, mime_type, file_data, file_size, file_hash, status, chunkr_task_id, chunkr_result, created_at, updated_at
`

type SetChunkrTaskIDParams struct {
	ID           uuid.UUID   `json:"id"`
	ChunkrTaskID pgtype.Text `json:"chunkr_task_id"`
}

func (q *Queries) SetChunkrTaskID(ctx context.Context, arg SetChunkrTaskIDParams) (Document, error) {
	row := q.db.QueryRow(ctx, setChunkrTaskID, arg.ID, arg.ChunkrTaskID)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileName,
		&i.MimeType,
		&i.FileData,
		&i.FileSize,
		&i.FileHash,
		&i.Status,
		&i.ChunkrTaskID,
		&i.ChunkrResult,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDocumentStatus = `-- name: UpdateDocumentStatus :exec
UPDATE documents
SET 
    status = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateDocumentStatusParams struct {
	ID     uuid.UUID      `json:"id"`
	Status DocumentStatus `json:"status"`
}

func (q *Queries) UpdateDocumentStatus(ctx context.Context, arg UpdateDocumentStatusParams) error {
	_, err := q.db.Exec(ctx, updateDocumentStatus, arg.ID, arg.Status)
	return err
}
