// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type DocumentStatus string

const (
	DocumentStatusPending   DocumentStatus = "pending"
	DocumentStatusChunking  DocumentStatus = "chunking"
	DocumentStatusChecking  DocumentStatus = "checking"
	DocumentStatusChunked   DocumentStatus = "chunked"
	DocumentStatusChunkfail DocumentStatus = "chunkfail"
	DocumentStatusIndexing  DocumentStatus = "indexing"
	DocumentStatusIndexed   DocumentStatus = "indexed"
	DocumentStatusIndexfail DocumentStatus = "indexfail"
)

func (e *DocumentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DocumentStatus(s)
	case string:
		*e = DocumentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DocumentStatus: %T", src)
	}
	return nil
}

type NullDocumentStatus struct {
	DocumentStatus DocumentStatus `json:"document_status"`
	Valid          bool           `json:"valid"` // Valid is true if DocumentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDocumentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DocumentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DocumentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDocumentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DocumentStatus), nil
}

type Document struct {
	ID           uuid.UUID          `json:"id"`
	UserID       uuid.UUID          `json:"user_id"`
	FileName     string             `json:"file_name"`
	MimeType     string             `json:"mime_type"`
	FileData     []byte             `json:"file_data"`
	FileSize     int64              `json:"file_size"`
	FileHash     []byte             `json:"file_hash"`
	Status       DocumentStatus     `json:"status"`
	ChunkrTaskID pgtype.Text        `json:"chunkr_task_id"`
	ChunkrResult []byte             `json:"chunkr_result"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

type User struct {
	ID           uuid.UUID          `json:"id"`
	Email        string             `json:"email"`
	PasswordHash string             `json:"password_hash"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}
